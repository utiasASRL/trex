#!/usr/bin/env python

import rospy
from std_msgs.msg import String, Empty
from sensor_msgs.msg import Joy
from asrl__sensors__trex.msg import *
from asrl__control__tether_management.msg import *
from asrl__drivers__labjack.msg import *
from asrl__drivers__labjack.srv import *

tensionMode = bool(0)
# resetValue = 0
tetherControlSet = bool(0)
previousAutoSwitch = 0
previousManualSwitch = 0
previousTetherControlSet = 0
motorVoltsMax = 2.8

# Mapping INPUT to desired OUTPUT range
def scale(val, src, dst):
	return ((val - src[0]) / (src[1]-src[0])) * (dst[1]-dst[0]) + dst[0]

def callback(data):
	print('got joy message')
	global tensionMode,pub,controlSwitchPub,setSpoolZeroPub,controlSelectPub,tetherControlSet,previousAutoSwitch,previousManualSwitch,previousTetherControlSet

	controlMessage = motorCommand()
        controlSetting = tetherControlType()

          # Mapping of Logitech Controller
        buttonA = data.buttons[0]
        buttonB = data.buttons[1]
        buttonX = data.buttons[2]
        buttonY = data.buttons[3]
        buttonLB = data.buttons[4]
        buttonRB = data.buttons[5]
        buttonBack = data.buttons[6]
        buttonStart = data.buttons[7]
        buttonPwr = data.buttons[8]
        joyLeftHrz = data.axes[0]
        joyLeftVrt = data.axes[1]
        joyRightHrz = data.axes[3]
        joyRightVrt = data.axes[4]
        axesLT = data.axes[2]
        axesRT = data.axes[5]

        deadman1 = buttonRB # primary deadman button for manual driving
        deadman2 = buttonB # used in VTR Repeat
	
  # set auto spool to on
        if buttonStart == 1 and previousAutoSwitch == 0:
                tensionMode = 1 # set to 1, else set to zero to turn off auto-tension
                previousManualSwitch = 0 # set manual to zero for next time
  # set auto spool to off
        if buttonBack == 1 and previousManualSwitch == 0:
                tensionMode = 0 # set to 1, else set to zero to turn off auto-tension
                previousAutoSwitch = 0 # set manual to zero for next time
  
  # not currently used anymore, 1 controller type is used for all terrain, buttons have no action
  # sets to flat ground controller
        if buttonB == 1 and buttonX == 1:
                tetherControlSet = 0
  # sets to steep terrain controller
        elif buttonA == 1 and buttonY == 1:
                tetherControlSet = 1
        else:
                tetherControlSet = previousTetherControlSet

        previousTetherControlSet = tetherControlSet
        controlSetting.tetherControlSet = tetherControlSet
        # Publish Control Setting (default zero)
        controlSelectPub.publish(controlSetting)

        # Print Controller Setting (Debug Only)
        #if controlSetting.tetherControlSet == 0:
        #        print('Control:\tFlat Ground\n')
        #else:
        #        print('Control:\tSteep Terrain\n')
  	
	#previousSwitchValue = buttonStart
	#print('tension Mode: %i' % tensionMode)
	controlMessage.tensionMode = tensionMode
        if deadman1 == 0 or deadman2 == 0:
                return

        print('deadman pressed\n')
	## manual tether control
        if tensionMode == 0:
                if abs(joyLeftVrt) < 0.1:
                        return

		if joyLeftVrt < 0 :
			controlMessage.motorDir = 0 #CW Reel In
			controlMessage.desiredVoltage = scale(joyLeftVrt, (-1.0,0.0),(motorVoltsMax,0.0))
		else :
			controlMessage.motorDir = 1	#CCW Pay Out
			controlMessage.desiredVoltage = scale(joyLeftVrt, (0.0,1.0),(0.0,motorVoltsMax))
		print('publishing message!\n')
		controlMessage.header.stamp = rospy.Time.now()
		pub.publish(controlMessage)
	else:
		controlSwitchPub.publish(Empty())
		print('tension mode: activated')


def joyControl():
	global pub,controlSwitchPub,controlSelectPub,setSpoolZeroPub
	rospy.init_node('joyControl', anonymous=True)
	pub = rospy.Publisher('/motorControlInterface/read_motorCommand', motorCommand, queue_size=10)	
	controlSwitchPub = rospy.Publisher('/joy_handoff', Empty,queue_size=10)
	controlSelectPub = rospy.Publisher('/select_control', tetherControlType, queue_size=10)
	rospy.Subscriber("joy", Joy, callback)
	rospy.spin()
  
if __name__ == '__main__':
	try:
		joyControl()
	except rospy.ROSInterruptException: pass
