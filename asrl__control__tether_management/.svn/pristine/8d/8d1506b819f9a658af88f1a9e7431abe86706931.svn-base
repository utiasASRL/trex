#!/usr/bin/env python

#######################################################
########### Select Flat/Steep Controller ##############
#######################################################

############### import libraries and messages #########

import rospy
from std_msgs.msg import String, Empty
from nav_msgs.msg import Odometry
from sensor_msgs.msg import Joy
from asrl__sensors__trex.msg import *
from asrl__control__tether_management.msg import *
from asrl__drivers__labjack.msg import *
from asrl__drivers__labjack.srv import *
import numpy as np

############### Tunable Parameters ####################

# TODO make a flat and steep max
motorVoltsMax = 5 # range: 0:5
motorVoltsMaxSteep = 3.25 # range: 0:5 #3.25 for dome demo
motorVoltsMin = 0.01 # min operable voltage
setVoltsIn = 3.4 # 2.3 v = vicon, 2.45 = robot garage
setVoltsOut = 1.95
sensedVoltsMin = 0 # set to zero to avoid control issues
vehicleMax = 0.1 # top vehicle speed in m/s 
cw_gain = 1 #TODO sets additional gain for reeling in (prevents sag). Set to 1 if nomial was 1.1
ccw_gain = 0.6 #TODO sets reduced gain for reeling out (prevents drift). Set to 1 if nomial was 0.4

# PID Parameters 
decayRate = 0.90 # sets integrator to decayRate overtime
integrator = 0
Kp = 0.46 # last setting 0.6 
Ki = 0 # last setting 0.12 
Kd = 0 # last setting 0.1

# Operable Arm Angle for Motor Actions
angleRange = 170 # degrees
range1A = 180 - (angleRange/2)
range1B = 180 + (angleRange/2)
range2A = 360 - (angleRange/2)
range2B =   0 + (angleRange/2)

################ initialize variables #################

voltsErrorLast = 0
setVoltsLast = setVoltsOut
setScale = 0
lastDirection = 1 # reelou (slow speed)

############### side functions #######################

def getTension(forceReading): # get current tension in volts
	global currentVolts
	currentVolts = forceReading.Vout

def getDirection(data): # get the joy command direction
	global driveDirection, lastDirection
	#TODO: set to parameter in case control input changes
	joyLinearCommand = data.axes[4] # Right Joystick (vertical copmponent)

	# check the desired drive direction
	# If joy stick exceeds 0.5 or -0.5 on a scale of [-1:1] set the controller
	if joyLinearCommand <= -0.5 and lastDirection == 0:
		driveDirection = 1 # backward/reelout
	elif joyLinearCommand >= 0.5 and lastDirection == 1:
		driveDirection = 0 # forward/reelin
	else:
		driveDirection = lastDirection
	lastDirection = driveDirection

def getArmAngle(armAngleReading):
	global armAngleDeg, armAngleRad
	armAngleDeg = armAngleReading.Deg
	armAngleRad = np.radians(armAngleDeg)
	
def getVelocity(velocity):
	global linearVelocity, angularVelocity
	linearVelocity = velocity.twist.twist.linear.x
	angularVelocity = velocity.twist.twist.angular.z

def getContolType(controlSelect):
	global setControlType
	setControlType = controlSelect.tetherControlSet

############### main function #######################

def listener(emptyMessage): # listens for empty joy message
	global currentVolts, controlPub, tensionPub, voltsErrorLast, integrator, setScale, driveDirection, setVoltsLast, linearVelocity, angularVelocity, armAngleDeg, armAngleRad, setControlType
	
	# messages to publish
	controlMessage = motorCommand()
	tensionMessage = tensionCommand()

	## Choose Control Type Here, 0=flat , 1=steep
	if setControlType == 0:
		####################################################
		######## FLATGROUND CONTROL (Tension Based) ########
		####################################################
		print('Control Setting:\tFlat Ground\n')

		#################### PID #########################
		if driveDirection == 1:
			setVolts = setVoltsOut
			setVoltsLast = setVolts 
		elif driveDirection == 0:
			setVolts = setVoltsIn
			setVoltsLast = setVolts
		else :
			setVolts = setVoltsLast
			#print('SetVolts\t[%f]\n'% setVolts)


		voltsError = setVolts - currentVolts
		voltsScaleKp = voltsError * Kp
		integrator = (decayRate * integrator) + voltsError
		voltsScaleKi = integrator * Ki
		voltsScaleKd = (voltsError - voltsErrorLast) * Kd
		voltsErrorLast = voltsError
		voltsScaler = voltsScaleKp + voltsScaleKi + voltsScaleKd

		if voltsScaler > 1 :
			voltsScaler = 1

		elif voltsScaler < -1 :
			voltsScaler = -1

		if abs(voltsScaler*motorVoltsMax) < motorVoltsMin:
			motorVoltCommand = 0

		else :
			motorVoltCommand = abs(voltsScaler*motorVoltsMax)

		############### send motor commands ##############

		if voltsScaler > 0 :
			controlMessage.motorDir = 0 #CW In
			setScale = 1 # in		

			if abs(motorVoltCommand * 1.5) < motorVoltsMax:
				controlMessage.desiredVoltage = motorVoltCommand
			else:
				controlMessage.desiredVoltage = motorVoltsMax

		elif voltsScaler < 0 :
			controlMessage.motorDir = 1 # CCW Out
			setScale = 0 # out

			controlMessage.desiredVoltage = motorVoltCommand

		else:
			controlMessage.desiredVoltage = 0  

	else :
		####################################################
		######## STEEP CONTROL (Command Velocity Based) ####
		####################################################
		print('Control Setting:\tSteep Terrain\n')

		################# Voltage Select #################

		# set minimum tension of tether
		if currentVolts < sensedVoltsMin :
			setVolts = sensedVoltsMin
			# PID
			voltsError = setVolts - currentVolts
			voltsScaleKp = voltsError * Kp
			integrator = (decayRate * integrator) + voltsError
			voltsScaleKi = integrator * Ki
			voltsScaleKd = (voltsError - voltsErrorLast) * Kd
			voltsErrorLast = voltsError
			voltsScaler = voltsScaleKp + voltsScaleKi + voltsScaleKd

			if voltsScaler > 1 :
				voltsScaler = 1
			elif voltsScaler < -1 :
				voltsScaler = -1
			if abs(voltsScaler*motorVoltsMaxSteep) < motorVoltsMin:
				motorVoltCommand = 0
			else :
				motorVoltCommand = voltsScaler*motorVoltsMaxSteep
				#print('Tension Mode: Active\n')

		# choose a proper set voltage based on arm angle	
		else :
			if range1A <= armAngleDeg <= range1B :
				direction = 1
				#print('Arm Angle: 180\n')
			elif armAngleDeg >= range2A or armAngleDeg <= range2B :
				direction = -1
				#print('Arm Angle: 0\n')
			else :
				direction = 0

			if linearVelocity <= 0 :
				offset = ccw_gain #TODO this adds a gain based on direction of reeling
			else :
				offset = cw_gain #TODO

			motorVoltCommand = ( linearVelocity / vehicleMax ) * motorVoltsMaxSteep * direction * abs(np.cos(armAngleRad))*offset #TODO

			#print('motorVoltCommand: [%f]\n' % motorVoltCommand )
			if motorVoltCommand >= motorVoltsMaxSteep :
				motorVoltCommand = motorVoltsMaxSteep
			elif motorVoltCommand <= -motorVoltsMaxSteep :
				motorVoltCommand = -motorVoltsMaxSteep

			if abs(motorVoltCommand) < motorVoltsMin:
				motorVoltCommand = 0

		############### send motor commands ###############

		if motorVoltCommand > 0 :
			controlMessage.motorDir = 0 #CW In
			controlMessage.desiredVoltage = abs(motorVoltCommand)

		elif motorVoltCommand < 0 :
			controlMessage.motorDir = 1 # CCW Out
			controlMessage.desiredVoltage = abs(motorVoltCommand)

		else:
			controlMessage.desiredVoltage = 0

	############ generate message content #############

	controlMessage.header.stamp = rospy.Time.now()
	tensionMessage.header.stamp = rospy.Time.now()
	controlPub.publish(controlMessage)
	tensionPub.publish(tensionMessage)

	################ print statements #################
	#print('Direction (0=in,1=out): [%i]\n' % controlMessage.motorDir)
	#print('Desired Tension:\t[%f]\n'% tensionMessage.setVolts)
	#print('Current Tension:\t[%f]\n'% currentVolts)	
	#print('Tension Error:\t\t[%f]\n'% voltsError)
	#print('PID Scaler:\t\t[%f]\n' % voltsScaler)
	#print('Desired Motor Volts\t[%f]\n\n' % (controlMessage.desiredVoltage))

############ subscribers and publishers #############

def tensionControl():
	global controlPub,tensionPub
	controlPub = rospy.Publisher('/motorControlInterface/read_motorCommand', motorCommand, queue_size=10)
	tensionPub = rospy.Publisher('/tensionCommand', tensionCommand, queue_size=10)
	rospy.Subscriber("/select_control", tetherControlType, getContolType)
	rospy.Subscriber("/tether_tension", forceCell, getTension)
	rospy.Subscriber("/joy_handoff", Empty, listener)
	rospy.Subscriber("joy", Joy, getDirection)
	rospy.Subscriber("/tether_angle", angleEncoder, getArmAngle)
	rospy.Subscriber("/vehicle/out/odometry", Odometry, getVelocity)
	rospy.init_node('tensionControl', anonymous=True)
	rospy.spin()

#################### main loop ######################
  
if __name__ == '__main__':
	try:		
		tensionControl()
	except rospy.ROSInterruptException: pass
