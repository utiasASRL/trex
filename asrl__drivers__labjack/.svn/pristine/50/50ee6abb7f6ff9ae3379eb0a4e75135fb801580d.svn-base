#!/usr/bin/env python

# LabJack T7 Interface

import rospy
from labjack import ljm
from asrl__sensors__trex.msg import *
from asrl__control__tether_management.msg import *
from asrl__drivers__labjack.msg import *
from asrl__drivers__labjack.srv import *

# kcu : logging facilities
import logging
import pdb
import sys
sys.path.append("..")
from utils.lj_buffer import *
import utils.lj_logger as lj_logger	# 'as' might not work
from utils.lj_logger import *
import utils.globalConfigData as globalConfigData

# Please see LJ API source : /usr/local/lib/python2.7/dist-packages/labjack/ljm/ljm.py
class LabjackInterfaceNode:
	#handle = ljm.open(ljm.constants.dtT7, ljm.constants.ctETHERNET, "192.168.0.49") # use for ETH connection
	handle = ljm.open(ljm.constants.dtANY, ljm.constants.ctANY, "ANY")  # use for USB connection

	def __init__(self):
		try:
			self.logging = TRexLabJackLogger("/tmp/trexLJLogs/lj_interface_log2.txt")
			self.logging.info("LabjackInterfaceNode2 initialized()")

			self.read_buffer = LabjackBuffer()

			#pdb.set_trace()	# Python debugging!

			rospy.init_node('labjack_interface_node')
			self.logging.info("init_node2 : labjack_interface_node")

			rospy.on_shutdown(self.shutdownHook)

			#self.handle = ljm.open(ljm.constants.dtT7, ljm.constants.ctETHERNET, "192.168.0.49") # use for ETH connection
			self.handle = ljm.open(ljm.constants.dtANY, ljm.constants.ctANY, "ANY")  # use for USB connection

			self.logging.info("done init LabjackInterfaceNode()")

			#tupleRet = ljm.listAll(ljm.constants.dtT7, ljm.constants.ctANY)

			# SUBSCRIPTIONS
			writeNamesSubscribe = rospy.Subscriber('~write_names', writeNames, self.dataWriteNames)
			self.logging.info("rospy subscriber init set :  : ~write_names, callback dataWriteNames")
			writeAddressesSubscribe = rospy.Subscriber('~write_addresses', writeAddresses, self.dataWriteAddresses)
			self.logging.info("rospy subscriber init set :  : ~writeAddresses, callback dataWriteAddresses")

			# SERVICES
			readNamesService = rospy.Service('~read_names', readNames, self.dataReadNames)  # ('name of request', MSG dependancy, point to function in class)
			self.logging.info("rospy service init set :  : ~read_names, callback dataReadNames")
			readAddressesService = rospy.Service('~read_addresses', readAddresses, self.dataReadAddresses)
			self.logging.info("rospy service init set :  : ~read_addresses, callback dataReadAddresses")

			readSPIService = rospy.Service('~read_SPI', readSPI, self.dataReadSPI)
			self.logging.info("rospy service init set :  : ~read_SPI, callback dataReadSPI")


		except ljm.LJMError as exc:
			print "LJ Interface caught the exception LJMError : ", str(exc)
			print "LJ Interface might have exited abruptly. Please check if any sensors are still on."

	def Run(self):
		rospy.spin()

	#SUBSCRIPTIONS
	def dataWriteNames(self,writeRequest):
		try:
			if writeRequest.numFrames == 1:
				ljm.eWriteName(self.handle, writeRequest.names[0], writeRequest.values[0])
				#print(writeRequest.numFrames)
				#print(writeRequest.names)
				#print(writeRequest.values)
			else:
				ljm.eWriteNames(self.handle, writeRequest.numFrames, writeRequest.names, writeRequest.values)
				#print(writeRequest.numFrames)
				#print(writeRequest.names)
				#print(writeRequest.values)
			self.logging.info("\tdataWriteNames() : writeRequest.numFrames: " + str(writeRequest.numFrames) +
							  ", writeRequest.names : " + str(writeRequest.names) + ", writeRequest.values : " +
							  str(writeRequest.values))
		except ljm.LJMError as exc:
			print "LJ Interface caught the exception LJMError : ", str(exc)
			print "LJ Interface might have exited abruptly. Please check if any sensors are still on."
		except TypeError as exc:
			print "LJ Interface caught the exception TypeError : ", str(exc)
			print "Please check if the sensor id(s) exists in LJ configurations."

	def dataWriteAddresses(self,writeRequest):
		try:
			if writeRequest.numFrames == 1:
				#print('writeAddress')
				ljm.eWriteAddress(self.handle, writeRequest.addresses[0], writeRequest.dataTypes[0], writeRequest.values[0])
			else:
				#print('writeAddress')
				#print(writeRequest.values)
				ljm.eWriteAddresses(self.handle, writeRequest.numFrames, writeRequest.addresses, writeRequest.dataTypes, writeRequest.values)
			self.logging.info("\t\t dataWriteAddresses() : writeAddress: " + str(writeRequest.values))
		except ljm.LJMError as exc:
			print "LJ Interface caught the exception LJMError : ", str(exc)
			print "LJ Interface might have exited abruptly. Please check if any sensors are still on."

	#############################################
	### NEW READ W/ SEQ NUMS
	#SERVICES
	def dataReadNames(self, readRequest):
		try :
			response = readNamesResponse()
			if readRequest.numFrames == 1:
				dataRead = ljm.eReadName(self.handle, readRequest.names[0])
				# response.data.append(dataRead)
				response.data = [0]
				response.data[0] = dataRead
			else:
				#print "readRequest.numFrames : ", readRequest.numFrames
				response.data = ljm.eReadNames(self.handle, readRequest.numFrames, readRequest.names)
			self.logging.info("\t\t\tdataReadNames() : "
							  'numFrames: %i' % readRequest.numFrames +
							  ", readRequest.names" + str(readRequest.names))
			return response
		except ljm.LJMError as exc:
			print "LJ Interface caught the exception LJMError : ", str(exc)
			print "LJ Interface might have exited abruptly. Please check if any sensors are still on."
		except TypeError as exc:
			print "LJ Interface caught the exception TypeError : ", str(exc)
			print "Please check if the sensor id(s) exists in LJ configurations."

	def dataReadAddresses(self,readRequest):
		try:
			#print('reading addresses frames %i' % readRequest.numFrames)
			response = readAddressesResponse()
			if readRequest.numFrames == 1:
				dataRead = ljm.eReadAddress(self.handle, readRequest.addresses[0], readRequest.dataTypes[0])
				response.data = [0]
				response.data[0] = dataRead
			else:
				response.data = ljm.eReadAddresses(self.handle, readRequest.numFrames, readRequest.addresses, readRequest.dataTypes)

			self.logging.info('\t\t\t\tdataReadAddresses()reading addresses frames %i' % readRequest.numFrames)

			return response

		except ljm.LJMError as exc:
			print "LJ Interface caught the exception LJMError : ", str(exc)
			print "LJ Interface might have exited abruptly. Please check if any sensors are still on."

	def dataReadSPI(self,readRequest):
		try:
			#print('processing request...')
			#print('CLKB_PORT %i ' % (readRequest.CLKB_PORT))
			#print('CHIP_PORT %i ' % (readRequest.CHIP_PORT))
			#print('CLKA_PORT %i ' % (readRequest.CLKA_PORT))
			#print('MISO_PORT %i ' % (readRequest.MISO_PORT))
			#print('MOSI_PORT %i ' % (readRequest.MOSI_PORT))
			#print('SPI_MODE %i ' % (readRequest.SPI_MODE))
			#print('SPI_FREQ %i ' % (readRequest.SPI_FREQ))
			#print('SPI_OPT %i ' % (readRequest.SPI_OPT))
			#print('NUM_BYTES %i ' % (readRequest.NUM_BYTES))
			#print('LOGIC_LEVEL %f ' % (readRequest.LOGIC_LEVEL))
			#print(readRequest.TX_MSG)

			response = readSPIResponse()

			if globalConfigData.use_new_dode_spi_multi_read :
				ljm.eWriteAddress(self.handle, readRequest.CLKB_PORT, ljm.constants.FLOAT32, readRequest.LOGIC_LEVEL)
				# TODO : Check if second var is "1"
				ljm.eWriteNames(self.handle, 1,
					["SPI_CS_DIONUM",
					 "SPI_CLK_DIONUM",
					 "SPI_MISO_DIONUM",
					 "SPI_MOSI_DIONUM",
					 "SPI_MODE",
					 "SPI_SPEED_THROTTLE",
					 "SPI_OPTIONS",
					 "SPI_NUM_BYTES"]
					,[readRequest.CHIP_PORT,
					 readRequest.CLKA_PORT,
					 readRequest.MISO_PORT,
					 readRequest.MOSI_PORT,
					 readRequest.SPI_MODE,
					 readRequest.SPI_FREQ,
					 readRequest.SPI_OPT,
					 readRequest.NUM_BYTES]
				)
				ljm.eWriteNameArray(self.handle, "SPI_DATA_TX",readRequest.NUM_BYTES , readRequest.TX_MSG)
				ljm.eWriteName(self.handle, "SPI_GO", readRequest.SPI_GO)
				response.byteRead = ljm.eReadNameArray(self.handle, "SPI_DATA_RX", readRequest.NUM_BYTES)

			else:
				ljm.eWriteAddress(self.handle, readRequest.CLKB_PORT, ljm.constants.FLOAT32, readRequest.LOGIC_LEVEL)
				ljm.eWriteName(self.handle, "SPI_CS_DIONUM", readRequest.CHIP_PORT)
				ljm.eWriteName(self.handle, "SPI_CLK_DIONUM", readRequest.CLKA_PORT)
				ljm.eWriteName(self.handle, "SPI_MISO_DIONUM", readRequest.MISO_PORT)
				ljm.eWriteName(self.handle, "SPI_MOSI_DIONUM", readRequest.MOSI_PORT)
				ljm.eWriteName(self.handle, "SPI_MODE", readRequest.SPI_MODE)
				ljm.eWriteName(self.handle, "SPI_SPEED_THROTTLE", readRequest.SPI_FREQ)
				ljm.eWriteName(self.handle, "SPI_OPTIONS", readRequest.SPI_OPT)
				ljm.eWriteName(self.handle, "SPI_NUM_BYTES", readRequest.NUM_BYTES)
				ljm.eWriteNameArray(self.handle, "SPI_DATA_TX", readRequest.NUM_BYTES, readRequest.TX_MSG)
				ljm.eWriteName(self.handle, "SPI_GO", readRequest.SPI_GO)
				response.byteRead = ljm.eReadNameArray(self.handle, "SPI_DATA_RX", readRequest.NUM_BYTES)


			self.logging.info(
				"\tdataReadSPI() : " +
				'LOGIC_LEVEL %f ' % (readRequest.LOGIC_LEVEL) + ", " +
				'CLKB_PORT %i ' % (readRequest.CLKB_PORT) + ", " +
				'CHIP_PORT %i ' % (readRequest.CHIP_PORT) + ", " +
				'CLKA_PORT %i ' % (readRequest.CLKA_PORT) + ", " +
				'MISO_PORT %i ' % (readRequest.MISO_PORT) + ", " +
				'MOSI_PORT %i ' % (readRequest.MOSI_PORT) + ", " +
				'SPI_MODE %i ' % (readRequest.SPI_MODE) + ", " +
				'SPI_FREQ %i ' % (readRequest.SPI_FREQ) + ", " +
				'SPI_OPT %i ' % (readRequest.SPI_OPT) + ", " +
				'NUM_BYTES %i ' % (readRequest.NUM_BYTES) + ", " +
				"readRequest.TX_MSG : " + str(readRequest.TX_MSG))

			return response

		except ljm.LJMError as exc:
			print "LJ Interface caught the exception LJMError : ", str(exc)
			print "LJ Interface might have exited abruptly. Please check if any sensors are still on."
		except TypeError as exc:
			print "LJ Interface caught the exception TypeError : ", str(exc)
			print "Please check if the sensor id(s) exists in LJ configurations."

	#SHUT DOWN PROCEDURE
	def shutdownHook(self):
		try:
			print('shutting down')
			self.logging.info("LabjackInterfaceNode shutdown")
			ljm.close(self.handle) # Close Labjack
		except ljm.LJMError as exc:
			print "LJ Interface caught the exception LJMError : ", str(exc)
			print "LJ Interface might have exited abruptly. Please check if any sensors are still on."

#THE MAIN LOOP
if __name__ == "__main__":
	print "LabjackInterfaceNode 2"
	interface = LabjackInterfaceNode()
	interface.Run()
